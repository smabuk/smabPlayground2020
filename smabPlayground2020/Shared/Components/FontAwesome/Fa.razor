@if (name is null)
{
	<i class="@($"{cssClass} {type} {iconName}")" style="@style" @attributes="InputAttributes">@ChildContent</i>
}
else if (name == FaName.Counter)
{
	<span class="@cssClass fa-layers fa-fw" style="@style">
		<i class="@($"{type} {iconName}")" @attributes="InputAttributes"></i>
		<span class="@($"fa-layers-counter fa-layers-{position}")">@ChildContent</span>
	</span>
}
else if (name.EndsWith(FaName.BrandSuffix))
{
	<span class="@($"{cssClass} fa-stack")" @attributes="InputAttributes" style="@style">
		<i class="@($"{type} fa-{name.Replace("-brand", "")} fa-stack-2x")"></i>
		<i class="@($"fa-brands {iconName} fa-stack-1x {(type.Contains("solid") ? "fa-inverse" :"")}")"></i>
	</span>
}
else if (name == FaName.CalendarDate || name == FaName.Today)
{
	@if (name == "today") { Date = DateOnly.FromDateTime(DateTime.UtcNow); }
	<span class="@cssClass fa-layers fa-fw" style="@style">
		<i class="@($"{type} {FaIcon.Calendar}")" @attributes="InputAttributes"></i>
		<span class="@($"fa-layers-text {span1.inverse}")" data-fa-transform="@span1.dataTransform" style="@span1.style">@Date?.ToString("MMMM")</span>
		<span class="@($"fa-layers-text {span2.inverse}")" data-fa-transform="@span2.dataTransform" style="@span2.style">@Date?.ToString("dd")</span>
	</span>
}

@code {
	[Parameter]
	public string? Icon { get; set; }

	[Parameter]
	public string? Name { get; set; }

	[Parameter]
	public FaType Type { get; set; } = FaType.Solid;

	[Parameter]
	public FaPosition Position { get; set; } = FaPosition.TopRight;

	[Parameter]
	public FaFlip? Flip { get; set; }

	[Parameter]
	public string? RotateBy { get; set; }

	[Parameter]
	public string? Size { get; set; }

	[Parameter]
	public string Style { get; set; } = "";

	[Parameter]
	public DateOnly? Date { get; set; }

	/// <summary>
	/// Fixed width
	/// This accepts the implied mapping of <param>fw</param>
	/// </summary>
	[Parameter]
	public bool? FW { get; set; }

	[Parameter]
	public string Class { get; set; } = "";


	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object> InputAttributes { get; set; } =
		new Dictionary<string, object>();

	string iconName = "";
	string? name = "";
	string type = "";
	string position = "";
	string cssClass = "";
	string? style = "";
	(string inverse, string dataTransform, string style) span1;
	(string inverse, string dataTransform, string style) span2;
	

	protected override void OnInitialized()
	{
		if (string.IsNullOrWhiteSpace(Icon) && string.IsNullOrWhiteSpace(Name))
		{
			if (string.IsNullOrWhiteSpace(ChildContent?.ToString()))
			{
				return;
			}
		}

		cssClass = Class;
		style = Style;
		name = Name?.ToLowerInvariant();
		iconName = string.IsNullOrWhiteSpace(Icon) ? "" : Icon.StartsWith("fa-") ? Icon.Trim() : $"fa-{Icon.Trim()}";
		position = Position.ToString();
		type = Type.ToString();

		if (!string.IsNullOrWhiteSpace(Size))
		{
			if (int.TryParse(Size, out int sizeValue) && sizeValue > 0)
			{
				cssClass += $" fa-{sizeValue}x";
			}
			else
			{
				cssClass += $" fa-{Size}";
			}
		}

		if (FW is not null)
		{
			cssClass += " fa-fw";
		}

		if (Flip is not null)
		{
			cssClass += $" fa-flip-{Flip?.ToString().Replace("None", "").ToLowerInvariant()}";
		}

		if (RotateBy is not null)
		{
			if (int.TryParse(RotateBy, out int rb))
			{
				switch (rb)
				{
					case 90:
					case 180:
					case 270:
						cssClass += $" fa-rotate-{rb}";
						break;
					default:
						cssClass += $" fa-rotate-by";
						style += $"--fa-rotate-angle: {RotateBy}deg;";
						break;
				}
			}
			else
			{
				cssClass += $" fa-rotate-by";
				style += $"--fa-rotate-angle: {RotateBy}";
			}
		}

		if (name == FaName.Today || name == FaName.CalendarDate)
		{
				SetUpCalendar();
		}

		style = string.IsNullOrWhiteSpace(style) ? null : style;

	}

	public void SetUpCalendar()
	{
		if (Type == FaType.Solid || Type == FaType.FontAwesome5Solid)
		{
			span1 = (inverse: "fa-inverse", "shrink-13.5 up-4.4", "font-weight:500");
			span2 = (inverse: "fa-inverse", "shrink-8.5 down-2.5", "font-weight:900");
		}
		else if (Type == FaType.Regular || Type == FaType.FontAwesome5Regular)
		{
			span1 = (inverse: "fa-inverse", "shrink-13.5 up-4", "font-weight:500");
			span2 = (inverse: "", "shrink-8.5 down-2", "font-weight:900");
		}
		else if (Type == FaType.DuoTone || Type == FaType.FontAwesome5DuoTone)
		{
			span1 = (inverse: "fa-inverse", "shrink-13.5 up-3.8", "font-weight:500");
			span2 = (inverse: "fa-inverse", "shrink-8.5 down-2.5", "font-weight:900");
		}
		else if (Type == FaType.Light || Type == FaType.FontAwesome5Light)
		{
			span1 = (inverse: "", "shrink-14 up-4.2", "font-weight:900");
			span2 = (inverse: "", "shrink-8.5 down-2", "font-weight:900");
		}
		else if (Type == FaType.Thin || Type == FaType.FontAwesome5Thin)
		{
			span1 = (inverse: "", "shrink-13.5 up-4", "font-weight:900");
			span2 = (inverse: "", "shrink-8.5 down-2.2", "font-weight:900");
		}
	}
}
