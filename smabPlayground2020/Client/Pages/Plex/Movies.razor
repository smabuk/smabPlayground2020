@page "/plex/movies"
@using smab.PlexInfo.Models
@using Syncfusion.Blazor.Grids
@inject PlexInfoClient plexClient
@inject PlexInfoState piState
<Title Value="Plex Movies - smabPlayground2020"></Title>

<p><em>@Message</em></p>
@if (items is not null)
{
    @*<SfGrid DataSource="@items" AllowPaging="true" AllowExcelExport="true" AllowSelection="true" AllowSorting="true" AllowFiltering="true">
            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
            <GridPageSettings PageSize="30"></GridPageSettings>
            <GridSelectionSettings CheckboxOnly="true" PersistSelection="true" Type="SelectionType.Multiple"></GridSelectionSettings>
            <GridColumns>
                <GridColumn Type="ColumnType.CheckBox" AllowFiltering="false" AllowSorting="false" Width="60"></GridColumn>
                <GridColumn Field=@nameof(ItemSummary.Id) Visible="false" IsPrimaryKey="true" Width="130"></GridColumn>
                <GridColumn Field=@nameof(ItemSummary.Year) TextAlign="TextAlign.Center" HeaderTextAlign="TextAlign.Center" Width="70"></GridColumn>
                <GridColumn Field=@nameof(ItemSummary.Title) ClipMode="ClipMode.EllipsisWithTooltip"></GridColumn>

            </GridColumns>
        </SfGrid>*@
<div class="card-group">
    @foreach (var item in items)
    {
        <div class="card">
            <a href="/Plex/Details/@item.Id" title="@item.Title"><img src="/PlexInfo/Photo?url=@(item.Thumb)&width=@(THUMB_WIDTH)&height=@(THUMB_HEIGHT)" class="card-img" loading="lazy" alt="..." /></a>
            <div class="card-body">
                <a href="/Plex/Details/@item.Id" title="@item.Title"><div class="card-title text-truncate">@item.Title</div></a>
                <div class="card-subtitle">@item.Year</div>
            </div>
        </div>
    }
</div>
}

@code {

    private const int THUMB_WIDTH = 200;
    private const int THUMB_HEIGHT = 300;

    public string Message { get; set; } = "Loading Movies ...";

    private List<MovieSummary>? items { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (piState.MoviesList is null)
        {
            piState.MoviesList = ((await plexClient.GetMoviesList()) ?? new()).ToList();
        }
        items = piState.MoviesList.Where(m => m.LibraryId != 8).OrderBy(m => m.LibraryTitle).ToList();
        Message = $"Showing {items.Count} movies";
    }
}
