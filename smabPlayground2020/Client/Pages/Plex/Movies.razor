@page "/plex/movies"
@using Syncfusion.Blazor.Grids
@inject PlexInfoClient plexClient
@inject PlexInfoState piState
<PageTitle>Plex Movies - smabPlayground2020</PageTitle>

<p><em>@Message</em></p>
@if (SelectedItems.Any()) {
<h3>Selected Items:</h3>
<ul>
    @foreach (MovieSummary selected in SelectedItems)
    {
        <li>@selected.Title</li>
    }
</ul>
}
@if (items is not null)
{
<div class="card-group">
    @foreach(MovieSummary item in items)
    {
        <MovieCard Item="item" OnItemChangedCallback="HandleChange" />
    }
</div>
}

@code {

	private readonly int SHORT_MOVIE_LIBRARY_ID = 8;

    public string Message { get; set; } = "Loading Movies ...";

    private List<MovieSummary>? allItems { get; set; }
    private List<MovieSummary>? items { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (piState.MoviesList is null)
        {
            piState.MoviesList = ((await plexClient.GetMoviesList()) ?? new()).ToList();
        }
        allItems = piState.MoviesList;
        items = allItems
                .Where(m => m.LibraryId != SHORT_MOVIE_LIBRARY_ID)
                .OrderByDescending(m => m.OriginallyAvailableAt)
                .ThenBy(m => m.LibraryTitle)
                .ToList();
        //items = items.Where(m => m.Title.StartsWith("A")).ToList();
        Message = $"Showing {items.Count} movies";
    }


    [Parameter]
    public List<MovieSummary> SelectedItems { get; set; } = new();

    [Parameter]
    public EventCallback<List<MovieSummary>> SelectedItemsChanged { get; set; }

    void HandleChange(MovieSummary item)
    {
        if (SelectedItems.Contains(item))
        {
            SelectedItems.Remove(item);
        }
        else
        {
            SelectedItems.Add(item);
        }
        SelectedItemsChanged.InvokeAsync(SelectedItems);
    }

}
