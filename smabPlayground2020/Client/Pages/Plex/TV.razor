@page "/plex/tv"
@using smab.PlexInfo.Models
@using smabPlayground2020.Shared.Helpers
@inject PlexInfoClient plexClient
@inject PlexInfoState piState
<Title Value="Plex TV Shows - smabPlayground2020"></Title>

<p><em>@Message</em></p>
@if (items is not null)
{
<div class="card-group">
    @*<Virtualize Items="@items" Context="item" >*@
    @foreach (var item in items)
    {
        <div class="card">
            <a href="/Plex/Details/@item.Id" title="@item.Title">
                @if (String.IsNullOrEmpty(item.Thumb)) {
                    <img src="/images/tv.png" class="card-img" loading="lazy" alt="..." />
                } else {
                    <img src="/PlexInfo/Photo?url=@(item.Thumb)&width=@(THUMB_WIDTH)&height=@(THUMB_HEIGHT)" class="card-img" loading="lazy" alt="..." />
                }
            </a>
            <div class="card-body">
                <a href="/Plex/Details/@item.Id" title="@item.Title">
                    <div class="text-truncate">@item.Title</div>
                </a>
                <div class="card-subtitle">@item.Seasons @((item.Seasons == 1) ? "season" : "seasons")</div>
                @if (item.OriginallyAvailableAt is not null) {
                    if (item.OriginallyAvailableAt?.Year > 1)
                    {
                        <div class="card-subtitle">@item.OriginallyAvailableAt?.ToDateLongMonthYearString()</div>
                    }
                }
            </div>
        </div>
    }
    @*</Virtualize>*@
</div>
}

@code {

    private const int THUMB_WIDTH = 200;
    private const int THUMB_HEIGHT = 300;

    public string Message { get; set; } = "Loading TV shows ...";

    private List<TvShowSummary>? items { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (piState.TvShowsList is null)
        {
            piState.TvShowsList = (await plexClient.GetTvShowsList() ?? new()).ToList();
        }
        items = piState.TvShowsList;
        Message = $"Showing {items.Count} TV shows";
    }
}
