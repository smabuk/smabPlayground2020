@using Smab.DiceAndTiles
@using Smab.Boggle.Models

<div class="grid-@(BoggleTray.Height) bg-gradient-warning m-auto rounded user-select-none" @oncontextmenu:preventDefault>
    @foreach (var slot in Reverse ? BoggleTray.Slots.Reverse<BoggleSlot>() : BoggleTray.Slots)
    {
        <div><BoggleSlotUI Slot="slot" OnClickCallback="e => SelectSlot(e, slot)" /></div>
    }
</div>

<style>
.slot {
    width:  @(DieSize / 2)rem;
    height: @(DieSize / 2)rem;
}
.die {
    font-size: @(DieFontSize / 2)rem;
}
@@media (min-width: 768px) {
    .slot {
        width:  @(DieSize)rem;
        height: @(DieSize)rem;
    }
    .die {
        font-size: @(DieFontSize)rem;
    }
}
</style>

@code {
    private double DieSize = 8;
    private double DieFontSize = 4.8;
    private int BoardSize => BoggleTray.BoggleSet.BoardSize;
    string currentWord = "";


    [Parameter]
    public BoggleTray BoggleTray { get; set; } = new();
    [Parameter]
    public bool Reverse { get; set; } = false;

    protected override void OnParametersSet()
    {
    }

    private void SelectLetter(MouseEventArgs e, int x, int y, LetterDie die)
    {
        string letter = die.FaceValue.Display;
        Console.WriteLine($"Selected: {letter} at ({x}, {y}) with Button={((ButtonType)e.Button).ToString()} and OtherButtons={((OtherButtonTypes)e.Buttons).ToString()}");
        // ToDo: Check letter can be added
        currentWord += letter;
        if ((ButtonType)e.Button == ButtonType.Right)
        {
            Console.WriteLine($"Word: {currentWord}");
            // ToDo: Check Word
            // ToDo: Add score
            currentWord = "";
        }
    }

    private void SelectSlot(MouseEventArgs e, BoggleSlot slot)
    {
        string letter = slot.Die.FaceValue.Display;
        Console.WriteLine($"Selected: {letter} at ({slot.X}, {slot.Y}) with Button={((ButtonType)e.Button).ToString()} and OtherButtons={((OtherButtonTypes)e.Buttons).ToString()}");
        // ToDo: Check letter can be added
        currentWord += letter;
        if ((ButtonType)e.Button == ButtonType.Right)
        {
            Console.WriteLine($"Word: {currentWord}");
            // ToDo: Check Word
            // ToDo: Add score
            currentWord = "";
        }
    }

    private bool CheckWord(string word)
    {
        return true;
    }

    private enum ButtonType
    {
        Left = 0,
        Middle = 1,
        Right = 2
    }

    [Flags]
    private enum OtherButtonTypes
    {
        None = 0,
        Left = 1,
        Right = 2,
        Middle = 4,
        Back = 8,
        Forward = 16,
    }

}
