@using Smab.DiceAndTiles

<div class="card bg-gradient-warning board m-auto rounded" @oncontextmenu:preventDefault>
    <table class="table table-sm">
        @if (Reverse)
        {
            @for (int row = BoardSize - 1; row >= 0; row--)
            {
                <tr class="cell">
                    @for (int col = BoardSize - 1; col >= 0; col--)
                    {
                        int x = col;
                        int y = row;
                        LetterDie die = BoggleSet.Board[row + (col * BoardSize)];
                
                        <BoggleDie Die="BoggleSet.Board[row + (col * BoardSize)]" Reverse="Reverse" OnClickCallback="e => SelectLetter(e, x, y, die)" />
                    }
                </tr>
            }
        }
        else
        {
            @for (int row = 0; row < BoardSize; row++)
            {
                <tr class="cell">
                    @for (int col = 0; col < BoardSize; col++)
                    {
                        int x = col;
                        int y = row;
                        LetterDie die = BoggleSet.Board[row + (col * BoardSize)];
                
                        <BoggleDie Die="BoggleSet.Board[row + (col * BoardSize)]" OnClickCallback="e => SelectLetter(e, x, y, die)" />
                    }
                </tr>
            }
        }
    </table>
</div>

<style>
.board {
    width:  @((BoardSize * (DieSize / 2)) + ((BoardSize) * .5))rem;
    height: @((BoardSize * (DieSize / 2)) + ((BoardSize) * .5))rem;
}
.slot {
    width:  @(DieSize / 2)rem;
    height: @(DieSize / 2)rem;
}
.die {
    font-size: @(DieFontSize / 2)rem;
}
@@media (min-width: 768px) {
    .board {
        width:  @((BoardSize * DieSize) + ((BoardSize) * .5))rem;
        height: @((BoardSize * DieSize) + ((BoardSize) * .5))rem;
    }
    .slot {
        width:  @(DieSize)rem;
        height: @(DieSize)rem;
    }
    .die {
        font-size: @(DieFontSize)rem;
    }
}
</style>

@code {
    private double DieSize = 8;
    private double DieFontSize = 4.8;
    private int BoardSize => BoggleSet.BoardSize;
    string currentWord = "";


    [Parameter]
    public BoggleDice BoggleSet { get; set; } = new();
    [Parameter]
    public bool Reverse { get; set; } = false;

    protected override void OnParametersSet()
    {
    }

    private void SelectLetter(MouseEventArgs e, int x, int y, LetterDie die)
    {
        string letter = die.FaceValue.Display;
        Console.WriteLine($"Selected: {letter} at ({x}, {y}) with Button={((ButtonType)e.Button).ToString()} and OtherButtons={((OtherButtonTypes)e.Buttons).ToString()}");
        // ToDo: Check letter can be added
        currentWord += letter;
        if ((ButtonType)e.Button == ButtonType.Right) 
        {
            Console.WriteLine($"Word: {currentWord}");
            // ToDo: Check Word
            // ToDo: Add score
            currentWord = "";
        }
    }

    private bool CheckWord(string word)
    {
        return true;
    }
    
    private enum ButtonType
    {
        Left = 0,
        Middle = 1,
        Right = 2
    }

    [Flags]
    private enum OtherButtonTypes
    {
        None = 0,
        Left = 1,
        Right = 2,
        Middle = 4,
        Back = 8,
        Forward = 16,
    }

    private string ButtonName(long button) => button switch
    {
        0 => "Left",
        1 => "Middle",
        2 => "Right",
        _ => "Unknown"
    };

    private string OtherButtonName(long button) => button switch
    {
        1 => "Left",
        2 => "Right",
        4 => "Middle",
        8 => "Back",
        16 => "Forward",
        0 => "None",
        _ => "Unknown"
    };

}
