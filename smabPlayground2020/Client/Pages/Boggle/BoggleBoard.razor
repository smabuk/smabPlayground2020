@using Smab.DiceAndTiles

<div class="card bg-gradient-warning board m-auto rounded">
    <table class="table table-sm">
        @if (Reverse)
        {
            @for (int row = BoardSize - 1; row >= 0; row--)
            {
                <tr class="cell">
                    @for (int col = BoardSize - 1; col >= 0; col--)
                    {
                        <BoggleDie Die="BoggleSet.Board[row + (col * BoardSize)]" Reverse="Reverse" />
                    }
                </tr>
            }
        }
        else
        {
            @for (int row = 0; row < BoardSize; row++)
            {
                <tr class="cell">
                    @for (int col = 0; col < BoardSize; col++)
                    {
                        <BoggleDie Die="BoggleSet.Board[row + (col * BoardSize)]" />
                    }
                </tr>
            }
        }
    </table>
</div>

<style>
.board {
    width:  @((BoardSize * (DieSize / 2)) + ((BoardSize) * .5))rem;
    height: @((BoardSize * (DieSize / 2)) + ((BoardSize) * .5))rem;
}
.slot {
    width:  @(DieSize / 2)rem;
    height: @(DieSize / 2)rem;
}
.die {
    font-size: @(DieFontSize / 2)rem;
}
@@media (min-width: 768px) {
    .board {
        width:  @((BoardSize * DieSize) + ((BoardSize) * .5))rem;
        height: @((BoardSize * DieSize) + ((BoardSize) * .5))rem;
    }
    .slot {
        width:  @(DieSize)rem;
        height: @(DieSize)rem;
    }
    .die {
        font-size: @(DieFontSize)rem;
    }
}
</style>

@code {
    private double DieSize = 8;
    private double DieFontSize = 4.8;
    private int BoardSize => BoggleSet.BoardSize;

    [Parameter]
    public BoggleDice BoggleSet { get; set; } = new();
    [Parameter]
    public bool Reverse { get; set; } = false;

    protected override void OnParametersSet()
    {
    }
}
