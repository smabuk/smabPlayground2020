<div class="grid-@(BoggleTray.Height) bg-gradient-warning m-auto rounded user-select-none" @oncontextmenu:preventDefault>
    @foreach (var slot in Reverse ? BoggleTray.Slots.Reverse<BoggleSlot>() : BoggleTray.Slots)
    {
        <BoggleSlotUI Selected="@slot.IsSelected" Slot="slot" ArrowDirection="@slot.ArrowDirection" OnClickCallback="e => SelectSlot(e, slot)" />
    }
</div>

<style>
.slot {
    width:  @(DieSize / 2)rem;
    height: @(DieSize / 2)rem;
}
.die {
    font-size: @(DieFontSize / 2)rem;
}
@@media (min-width: 768px) {
    .slot {
        width:  @(DieSize)rem;
        height: @(DieSize)rem;
    }
    .die {
        font-size: @(DieFontSize)rem;
    }
}
</style>

@code {
    private double DieSize = 8;
    private double DieFontSize = 4.8;
    string currentWord = String.Empty;
    BoggleSlot? lastSlot;


    [Parameter]
    public BoggleTray BoggleTray { get; set; } = new();
    [Parameter]
    public bool Reverse { get; set; } = false;

    protected override void OnParametersSet()
    {
        Console.WriteLine($"New Game: {BoggleTray.BoggleSetType.ToString()}");
        lastSlot = null;
        currentWord = String.Empty;
    }

    private void SelectSlot(MouseEventArgs e, BoggleSlot slot)
    {
        string letter = slot.Die.FaceValue.Display;
        if (lastSlot is not null && lastSlot == slot)
        {
            Console.WriteLine($"Word: {currentWord}");
            // ToDo: Check Word
            // ToDo: Add score
            currentWord = String.Empty;
            lastSlot = null;
            BoggleTray.Slots.ForEach(s => { s.IsSelected = false; s.ArrowDirection = "NONE"; });
        }
        else if (lastSlot is null || slot.AdjacentSlots.Contains(lastSlot) && slot.IsSelected == false)
        {
            //Console.WriteLine($"Selected: {letter} at ({slot.X}, {slot.Y}) with Button={((ButtonType)e.Button).ToString()} and OtherButtons={((OtherButtonTypes)e.Buttons).ToString()}");
            Console.WriteLine($"Direction: {letter} arrow-{GetDirection(lastSlot?.X, lastSlot?.Y, slot.X, slot.Y)}");
            if (lastSlot is null)
            {
                slot.ArrowDirection = GetDirection(lastSlot?.X, lastSlot?.Y, slot.X, slot.Y);
            }
            else
            {
                lastSlot.ArrowDirection = GetDirection(lastSlot?.X, lastSlot?.Y, slot.X, slot.Y);
            }
            slot.IsSelected = true;
            currentWord += letter;
            lastSlot = slot;
        }
        else
        {
        }
    }

    private bool CheckWord(string word)
    {
        return true;
    }

    private string GetDirection(int? lastX, int? lastY, int newX, int newY)
    {
        if (lastX is null || lastY is null)
        {
            return "START";
        }

        return (newX - lastX, newY - lastY) switch
        {
            (0, 0) => "END",
            (0, -1) => "N",
            (1, -1) => "NE",
            (1, 0) => "E",
            (1, 1) => "SE",
            (0, 1) => "S",
            (-1, 1) => "SW",
            (-1, 0) => "W",
            (-1, -1) => "NW",
            _ => String.Empty
        };
    }


    private enum ButtonType
    {
        Left = 0,
        Middle = 1,
        Right = 2
    }

    [Flags]
    private enum OtherButtonTypes
    {
        None = 0,
        Left = 1,
        Right = 2,
        Middle = 4,
        Back = 8,
        Forward = 16,
    }

}
